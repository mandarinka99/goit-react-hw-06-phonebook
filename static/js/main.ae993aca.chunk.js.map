{"version":3,"sources":["Components/contactsList/ContactsList.module.css","Components/filterContacts/FilterContactForm.module.css","Components/container/Container.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-reducer.js","redux/store.js","Components/contactsList/ContactsList.js","Components/container/Container.js","Components/createContactForm/CreateContactForm.js","Components/filterContacts/FilterContacts.js","Components/App.js","index.js","Components/createContactForm/CreateContactForm.module.css"],"names":["module","exports","createContact","createAction","name","number","payload","id","uuidv4","setContacts","deleteContact","filterChange","items","createReducer","state","_","filter","contact","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfigContacts","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ContactsList","useSelector","dispatch","useDispatch","newFilter","toLowerCase","includes","className","s","list","map","item","button","onClick","Container","children","styles","container","initialState","CreateContactForm","onChange","useState","setContact","onHandleChange","e","target","value","formWrapper","onSubmit","preventDefault","find","newContact","alert","form","label","input","type","pattern","title","required","FilterContacts","App","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.ae993aca.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__3I0VP\",\"item\":\"ContactsList_item__1abdr\",\"button\":\"ContactsList_button__M9UiH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FilterContactForm_form__jAwRI\",\"label\":\"FilterContactForm_label__3M5aP\",\"input\":\"FilterContactForm_input__1ERN7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2nGXs\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const createContact = createAction(\n  'contacts/create', \n  (name, number) => {\n  return {\n    payload: {\n        id: uuidv4(),\n        name,\n        number,\n      }\n  }\n});\n\nexport const setContacts = createAction('contacts/set');\n\nexport const deleteContact = createAction('contacts/delete');\n\nexport const filterChange = createAction('contacts/filter');\n","import { combineReducers } from \"redux\";\nimport { createReducer } from '@reduxjs/toolkit';\nimport {createContact, setContacts, deleteContact, filterChange} from './contacts-actions';\n\n\nconst items = createReducer([], {\n  [createContact]: (state, {payload}) => [...state, payload],\n  [setContacts]: (_, {payload}) => [...payload],\n  [deleteContact]: (state, {payload}) => state.filter(contact => contact.id !== payload)\n})\n\nconst filter = createReducer('', {\n  [filterChange]: (_, {payload}) => payload,\n})\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport logger from 'redux-logger';\n\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst persistConfigContacts = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nexport const store = configureStore({\n  reducer: { contacts: persistReducer(persistConfigContacts, contactsReducer) },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import s from \"./ContactsList.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { deleteContact } from \"../../redux/contacts/contacts-actions\";\n\nconst ContactsList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n\n  let newFilter = contacts;\n  if (filter) {\n    newFilter = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n  \n  return (\n    <div>\n      <ul className={s.list}>\n        {newFilter.map((contact) => (\n          <li className={s.item} key={contact.id}>\n            {contact.name} {contact.number}{\" \"}\n            <button\n              className={s.button}\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ContactsList;","import styles from \"./Container.module.css\";\nimport PropTypes from \"prop-types\";\n\nconst Container = ({ children }) => (\n  <div className={styles.container}>{children}</div>\n);\n\nContainer.propTypes = {\n  children: PropTypes.array.isRequired\n}\n\nexport default Container;\n","\nimport s from \"./CreateContactForm.module.css\";\nimport { useSelector, useDispatch} from \"react-redux\";\nimport {createContact} from \"../../redux/contacts/contacts-actions\";\nimport { useState } from \"react\";\n\nconst initialState = {\n  name: '',\n  number: ''\n};\n\nconst CreateContactForm = ({onChange}) => {\n  const [contact, setContact] = useState({...initialState});\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const onHandleChange = (e) => {\n    const { name, value } = e.target;\n    setContact({...contact, [name]: value });\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n    const find = contacts.find(\n      (newContact) => newContact.name.toLowerCase() === contact.name.toLowerCase()\n    );\n    if (find) return alert(`${contact.name} is already in contacts`);\n    dispatch(createContact(contact.name, contact.number));\n    setContact({\n      name: \"\",\n      number: \"\",\n    });\n  };\n\n  return (\n    <div className={s.formWrapper}>\n    <form onSubmit={onSubmit}\n    className={s.form}>\n      <label className={s.label}>\n        Name\n        <input\n        className={s.input}\n        type=\"text\"\n        name=\"name\"\n        value={contact.name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      onChange={onHandleChange}/>\n      </label>\n      <label className={s.label}>\n        Phone\n        <input\n        className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          value={contact.number}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={onHandleChange}\n        />\n\n      </label>\n      <button type=\"submit\"\n      className={s.button}>\n        Add contact\n      </button>\n    </form>\n    </div>\n  );\n}\n\nexport default CreateContactForm;","import s from \"./FilterContactForm.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport {filterChange} from '../../redux/contacts/contacts-actions';\n\nconst FilterContacts = () => {\n  const dispatch = useDispatch();\n  const onHandleChange = e => {\n    const { value } = e.target;\n    dispatch(filterChange(value));\n  };\n  return (\n    <div>\n      <form className={s.form} onSubmit={e => e.preventDefault()}>\n        <label className={s.label}>\n          Find contacts by name\n          <input\n          className={s.input}\n            type=\"text\"\n            name=\"filter\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            onChange={onHandleChange}\n          />\n        </label>\n      </form>\n    </div>\n  );\n}\n\nexport default FilterContacts;","import React from \"react\";\nimport ContactsList from \"./contactsList/ContactsList\";\nimport Container from \"./container/Container\";\nimport CreateContactForm from \"./createContactForm/CreateContactForm\";\nimport FilterContacts from \"./filterContacts/FilterContacts\";\n\n\nconst App = () => {\n  return (\n    <Container>\n        <h1>Phonebook</h1>\n        <CreateContactForm/>\n        <h2>Contacts</h2>\n        <FilterContacts/>\n        <ContactsList \n        />\n      </Container>\n  );\n}\n\nexport default App;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport App from \"./Components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n  <PersistGate loading={null} persistor={persistor}>\n    <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formWrapper\":\"CreateContactForm_formWrapper__1CZxu\",\"form\":\"CreateContactForm_form__36rZ_\",\"label\":\"CreateContactForm_label__EcFAo\",\"input\":\"CreateContactForm_input__3zn7G\",\"button\":\"CreateContactForm_button__2nkw7\"};"],"sourceRoot":""}